// ./brutus tolerance wordlength t_begin t_end dt_out N file_in

#include <iostream>
using namespace std;

#include <fstream>

#include <vector>
#include <cmath>
#include <numeric> 
#include <cstdlib>

#include "mpreal.h"
using namespace mpfr;

#include "Timer.h"
#include "Data_Handler.h"
#include "Brutus.h"

void MyPrint(string time, int &N, double &tcpu, vector<string> &data, ostream &str) {
  str << time << " " << N << " " << tcpu << endl;
  for(int i=0; i<N; i++) {
    for(int j=0; j<7; j++) {
      str << data[i*7+j] << " ";
    }
    str << endl;
  }
  str << endl;
}

vector<mpreal> read_snapshot_from_file(const string & file_in) {
  vector<mpreal> data;
  string line;
  string value;
  ifstream inFile(file_in); //"testcase.txt");
  if (inFile) {
    while (std::getline(inFile, line)) {
      std::istringstream iss(line);
      while (iss >> value) {
	data.push_back(value);
      }
    }
  }
  inFile.close();
  return data;
}

vector<mpreal> get_initial_condition() {
  vector<mpreal> data;

  // Binary initial condition as example
  /*data.push_back("0.5"); // m1
  data.push_back("0.5"); // x1
  data.push_back("0"); // y1
  data.push_back("0"); // z1
  data.push_back("0"); // vx1
  data.push_back("0.5"); // vy1
  data.push_back("0"); // vz1

  data.push_back("0.5"); // m2
  data.push_back("-0.5"); // x2
  data.push_back("0"); // y2
  data.push_back("0"); // z2
  data.push_back("0"); // vx2
  data.push_back("-0.5"); // vy2
  data.push_back("0"); // vz2
  */
  data.push_back("0.0625");
  data.push_back("-0.0700047768149993643316264524401049129664897918701171875");
  data.push_back("-0.53237470932346975249771503513329662382602691650390625");
  data.push_back("0.004614261938656802168601256397550969268195331096649169921875");
  data.push_back("-0.436708512041450058749347817865782417356967926025390625");
  data.push_back("-0.1496805932699984131861725700218812562525272369384765625");
  data.push_back("-0.5764956395459178706275338299747090786695480346679687");

  data.push_back("0.0625");
  data.push_back("0.94366744219251763592382076240028254687786102294921875");
  data.push_back("-0.94016526037034175988793549549882300198078155517578125");
  data.push_back("0.1653185073819481709644918510093702934682369232177734375");
  data.push_back("-0.365669269034158139763945882805273868143558502197265625");
  data.push_back("0.073247495043370081102551694129942916333675384521484375");
  data.push_back("-0.061158156441577876671900071414711419492959976196289062");

  data.push_back("0.0625");
  data.push_back("-0.3621343317702316877415569251752458512783050537109375");
  data.push_back("0.36306320795509272603140971114044077694416046142578125");
  data.push_back("0.354638761287827841695019515100284479558467864990234375");
  data.push_back("0.116643606142586009344341846372117288410663604736328125");
  data.push_back("-0.30410683779977543128580919074011035263538360595703125");
  data.push_back("0.22034019951762001676698332630621735006570816040039062");

  data.push_back("0.0625");
  data.push_back("-0.494537209025486534930138304844149388372898101806640625");
  data.push_back("0.642868576839461081107174322823993861675262451171875");
  data.push_back("0.109303751155919892656953607001923955976963043212890625");
  data.push_back("0.5165309285120347482234137714840471744537353515625");
  data.push_back("0.41589146047768499325769653296447359025478363037109375");
  data.push_back("0.106417924960589910243768940745212603360414505004882812");

  data.push_back("0.0625");
  data.push_back("0.4821878593718877947793544080923311412334442138671875");
  data.push_back("-0.1927252615766090471094429403819958679378032684326171875");
  data.push_back("-0.35452973554329603178558727449853904545307159423828125");
  data.push_back("0.287547780080783521583498441032133996486663818359375");
  data.push_back("0.8240647594923953267453953230869956314563751220703125");
  data.push_back("0.2229535711725326718735118447511922568082809448242187");

  data.push_back("0.0625");
  data.push_back("0.0673569727987940736202432390200556255877017974853515625");
  data.push_back("0.209149133257955088804891374820726923644542694091796875");
  data.push_back("0.06362820918991644869588952815320226363837718963623046875");
  data.push_back("0.53137666916194337130008307212847284972667694091796875");
  data.push_back("-0.285711121973245385508022309295483864843845367431640625");
  data.push_back("0.9469283757687477764974914862250443547964096069335937");

  data.push_back("0.0625");
  data.push_back("0.2114934086419233694176256221908261068165302276611328125");
  data.push_back("-0.362983340024530753975540164901758544147014617919921875");
  data.push_back("-0.147404343398038928381055256977560929954051971435546875");
  data.push_back("-0.5776943890257222324891017706249840557575225830078125");
  data.push_back("-0.62955086533669979420579920770251192152500152587890625");
  data.push_back("-0.249679614196762295064146996992349158972501754760742187");

  data.push_back("0.0625");
  data.push_back("-1.1729852603115749065665340822306461632251739501953125");
  data.push_back("0.292267449587287841961114054356585256755352020263671875");
  data.push_back("-0.05139499122522368790288993523063254542648792266845703125");
  data.push_back("0.48225135087252990473416502936743199825286865234375");
  data.push_back("0.234234059452459619787845213068067096173763275146484375");
  data.push_back("0.208830707334929366325582122954074293375015258789062");

  data.push_back("0.0625");
  data.push_back("0.70590327648819972683469359253649599850177764892578125");
  data.push_back("-0.1828779695041893582629910497416858561336994171142578125");
  data.push_back("-0.27878066984004856720957832294516265392303466796875");
  data.push_back("-0.30860086847793455344657331806956790387630462646484375");
  data.push_back("0.54465838490416251804759895094321109354496002197265625");
  data.push_back("-0.48029806794257628999034182015748228877782821655273437");

  data.push_back("0.0625");
  data.push_back("-0.288837259259962397806020817370153963565826416015625");
  data.push_back("0.73373571141936089201607273935223929584026336669921875");
  data.push_back("-1.2984219823001506011195260725799016654491424560546875");
  data.push_back("0.0012537821174900417274533648281931164092384278774261474609375");
  data.push_back("0.262036252613083886497946650706580840051174163818359375");
  data.push_back("-0.05921485945376486065283572202133655082434415817260742187");

  data.push_back("0.0625");
  data.push_back("0.306419842887440008194488427761825732886791229248046875");
  data.push_back("0.163192383948636887680549989454448223114013671875");
  data.push_back("-0.052982571524844333799020290598491556011140346527099609375");
  data.push_back("-0.481453425199669216016928885437664575874805450439453125");
  data.push_back("-0.71082331802862575020895974375889636576175689697265625");
  data.push_back("-0.088034665925979638245735259260982275009155273437");

  data.push_back("0.0625");
  data.push_back("0.438585178021414334725847083973349072039127349853515625");
  data.push_back("0.034582099815325458014303450227089342661201953887939453125");
  data.push_back("0.208773625770743265217532780297915451228618621826171875");
  data.push_back("-0.570933173726299703076847436022944748401641845703125");
  data.push_back("0.4131735771097979625920970647712238132953643798828125");
  data.push_back("-0.44236352753901703183103677474719006568193435668945312");

  data.push_back("0.0625");
  data.push_back("0.6212755260296614068238341133110225200653076171875");
  data.push_back("-0.444277045937527648167275629020878113806247711181640625");
  data.push_back("-0.945869427466301093687661705189384520053863525390625");
  data.push_back("-0.1723079942706580158784390732762403786182403564453125");
  data.push_back("-0.318779585306895263396853579251910559833049774169921875");
  data.push_back("-0.233080120972531085188350630232889670878648757934570312");

  data.push_back("0.0625");
  data.push_back("-0.36776853255330188563476667695795185863971710205078125");
  data.push_back("0.2086588880107009547071328370293485932052135467529296875");
  data.push_back("1.3714614485424549972236718531348742544651031494140625");
  data.push_back("0.2172409632058430462020481854779063723981380462646484375");
  data.push_back("-0.436486149344352813983505257056094706058502197265625");
  data.push_back("-0.42492771099048853855606466822791844606399536132812");

  data.push_back("0.0625");
  data.push_back("-0.862762622779422283514350056066177785396575927734375");
  data.push_back("0.36631148824180426171182034522644244134426116943359375");
  data.push_back("0.6059120107244597708273659009137190878391265869140625");
  data.push_back("0.4411444896964107353909412267967127263545989990234375");
  data.push_back("0.01414581752713818356415043098195383208803832530975341796875");
  data.push_back("0.28022942726167426874539501113758888095617294311523437");

  data.push_back("0.0625");
  data.push_back("-0.15785951391685915101703585605719126760959625244140625");
  data.push_back("-0.358425352338956726416796527701080776751041412353515625");
  data.push_back("0.2457331453059762582658009932856657542288303375244140625");
  data.push_back("0.3193780619862705005829184301546774804592132568359375");
  data.push_back("0.053686664439500299261798232919318252243101596832275390625");
  data.push_back("0.6295521569925214278029557135596405714750289916992187");

  return data;
}

int main(int argc, char* argv[]) {


  ///////////////////////////////////////////////////////// 

  mpreal tolerance = argv[1];
  int numBits = atoi(argv[2]);
  mpreal t_begin = argv[3];
  mpreal t_end = argv[4];
  mpreal dt = argv[5];
  int N = atoi(argv[6]);
  string input_file;
  vector<mpreal> data;    
  if(argc > 7){
    input_file = argv[7];
     data = read_snapshot_from_file(input_file);
  }
  else {
    data = get_initial_condition();
  }
  mpreal::set_default_prec(numBits);
  int numDigits = (int)abs(log10( pow("2.0", -numBits) )).toLong();
  
  /////////////////////////////////////////////////////////

  int Npr = data.size()/7;
  if (N != Npr) {
    cerr << "Number of particles at command line ("<<N<<") not the same as read from input ("<<Npr<<")"<< endl;
    cerr << " Stop.";
    return 0;
  }

  /////////////////////////////////////////////////////////


  mpreal t = t_begin;
  Brutus brutus(t_begin, data, tolerance, numBits);

  mpreal eta = brutus.get_eta();

  Timer timer;
  double t_cpu = 0;

  //cerr << "Simulation started... " << endl;

  vector<string> sdata = brutus.get_data_string();

  MyPrint(t.toString(), N, t_cpu, sdata, cout);

  /////////////////////////////////////////////////////////

  //cerr << t << "/" << t_end << endl;

  {
  while(t < t_end) {
    timer.start();

    t += dt;

    brutus.evolve(t);

    timer.stop();
    t_cpu += timer.get();

    sdata = brutus.get_data_string();
    MyPrint(t.toString(), N, t_cpu, sdata, cout);

    //cerr << t << "/" << t_end << endl;    
  }
  }

  //sdata = brutus.get_data_string();
  //MyPrint(t.toString(), N, t_cpu, sdata, cerr);

  /////////////////////////////////////////////////////////

  cerr << "Result: filename= " << input_file;
  cerr << " N= " << N; 
  cerr << " t_begin= " << t_begin; 
  cerr << " t_end= " << t; 
  cerr << " dt= " << dt;
  cerr << " eta= " << eta;
  cerr << " tol= " << tolerance;
  cerr << " Lw= " << numBits;
  cerr << " t_cpu= " << t_cpu;
  //cerr << " x0 = " << sdata[1];
  cerr << endl;
  
  //cerr << "Simulation finished!" << endl;

  return 0;
}



    
